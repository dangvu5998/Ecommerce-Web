<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"

       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:security="http://www.springframework.org/schema/c"
       xmlns:webflow-config="http://www.springframework.org/schema/webflow-config"

       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/webflow-config http://www.springframework.org/schema/webflow-config/spring-webflow-config.xsd">

    <!-- Activates scanning of @Repository and @Service and @Component -->

    <context:component-scan base-package="com" />

    <!-- database properties DataSource -->
    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost:3306/java_ecommerce" />
        <property name="username" value="root" />
        <property name="password" value="Aa234566" />
    </bean>

    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <!-- dependency Injection of dataSource -->
        <property name="dataSource" ref="dataSource"></property>
        <property name="packagesToScan" value="com.entity" />
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>

                <!-- hibernate mapping to database automatically -->
                <!-- when we use create-drop instead of update the table is created automatically
                    when the server runs after that it will drop when server stops -->
                <!-- <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.hbm2ddl.auto">create</prop> -->

                <!-- whether the query wants to show the data in console -->
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>

            </props>
        </property>

        <!-- packages to scan for Entity Classes annotated Classes package -->
        <property name="annotatedClasses">
            <list>
                <value>com.entity.Product</value>
                <value>com.entity.Authorities</value>
                <!-- <value>com.entity.BillingAddress</value> -->
                <value>com.entity.Cart</value>
                <value>com.entity.CartItem</value>
                <value>com.entity.Customer</value>
                <value>com.entity.CustomerOrder</value>
                <!-- <value>com.entity.ShippingAddress</value> -->
                <value>com.entity.User</value>
                <value>com.entity.Queries</value>
            </list>
        </property>

    </bean>

    <!-- A transaction manager is the part of an application that is responsible
        for coordinating transactions across one or more resources. In the Spring
        framework, the transaction manager is effectively the root of the transaction
        system. -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>


    <webflow-config:flow-executor id="flowExecutor"
                                  flow-registry="flowRegistry">
    </webflow-config:flow-executor>

    <webflow-config:flow-registry id="flowRegistry"
                                  base-path="/WEB-INF/flow">
    </webflow-config:flow-registry>
    <bean id="flowHandleMapping"
          class="org.springframework.webflow.mvc.servlet.FlowHandlerMapping">
        <property name="flowRegistry" ref="flowRegistry"></property>
    </bean>
    <bean id="flowHandlerAdapter" class="org.springframework.webflow.mvc.servlet.FlowHandlerAdapter">
        <property name="flowExecutor" ref="flowExecutor"></property>
    </bean>


</beans>